name: Deploy terraform

on:
  workflow_dispatch:
  push:
env:
  project: "test"


jobs:

#---------------------------------------------------------------------------------------------------------------
# Terraform plan jobs
#---------------------------------------------------------------------------------------------------------------
  
  setup-branches:
    name: "Setup Branch"
    runs-on: ubuntu-latest
    outputs:
      setup-production-branch: ${{ steps.setup-branch.outputs.setup-branches }}
    steps:
      - id: setup-branch
        name: Set output
        run: echo "::set-output name=setup-branches::{\"inlude\":${{ github.ref == 'refs/heads/production'}}, ${{github.ref == 'refs/heads/master'}}}"

  plan:
    needs: setup-branches
    strategy:
      matrix: 
        include:
          - plan_name: "Production Plan"
            aws-access-key-id: "AWS_ACCESS_KEY_ID_PROD"
            aws-secret-access-key: "AWS_SECRET_KEY_PROD"
            environment: plan-production
            bucket_name: "testproduction-terraform-state"
            name: "production"
            project: "test"
          - plan_name: "Staging Plan"
            aws-access-key-id: "AWS_ACCESS_KEY_ID_STG"
            aws-secret-access-key: "AWS_SECRET_KEY_STG"
            environment: plan-staging
            bucket_name: "teststaging-terraform-state"
            name: "staging"
            project: "test"
            

    name: ${{ matrix.plan_name}}
    if: ${{ needs.setup-branches.outputs.setup-branches }}
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.7
    environment: ${{ matrix.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{vars[matrix.aws-access-key-id]}}
      AWS_SECRET_KEY: ${{secrets[matrix.aws-secret-access-key]}}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_KEY}}
          aws-region: eu-central-1
                  
      - name: Terraform Init
        run: terraform init -backend-config="key=${{matrix.project}}/terraform.tfstate" -backend-config="bucket=${{matrix.bucket_name}}"

      - name: Terraform Plan
        run: terraform plan -no-color -var-file="vars_${{matrix.name}}.tfvars" -out=plan.tfplan

      - name: Archive plan
        uses: actions/upload-artifact@v4
        with:
          name: "terraform-plan-${{matrix.project}}-${{matrix.name}}"
          path: ./plan.tfplan

  # plan_stg:
  #   name: "Staging Plan"
  #   runs-on: ubuntu-latest
  #   container:
  #     image: hashicorp/terraform:1.7
  #   if: github.ref == 'refs/heads/master'
  #   environment:
  #     name: plan-staging
  #   env: 
  #     name: "staging"
  #     bucket_name: "teststaging-terraform-state"

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4
  
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID_STG}}
  #         aws-secret-access-key: ${{secrets.AWS_SECRET_KEY_STG}}
  #         aws-region: eu-central-1
          
  #     - name: Terraform Init
  #       run: terraform init -backend-config="region=eu-central-1" -backend-config="key=${{env.project}}/terraform.tfstate" -backend-config="bucket=${{env.bucket_name}}" -backend-config="dynamodb_table=${{env.bucket_name}}-lock"

  #     - name: Terraform Plan
  #       run: terraform plan -no-color -var-file="vars_${{env.name}}.tfvars" -out=plan.tfplan

  #     - name: Archive plan
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: "terraform-plan-${{env.project}}-${{env.name}}"
  #         path: ./plan.tfplan

  # plan_prod:
  #   name: "Production Plan"
  #   runs-on: ubuntu-latest
  #   container:
  #     image: hashicorp/terraform:1.7
  #   if: github.ref == 'refs/heads/production'
  #   environment:
  #     name: plan-production
  #   env: 
  #     name: "production"
  #     bucket_name: "test-terraform-state"
 
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID_PROD}}
  #         aws-secret-access-key: ${{secrets.AWS_SECRET_KEY_PROD}}
  #         aws-region: eu-central-1

  #     - name: Terraform Init
  #       run: terraform init -backend-config="region=eu-central-1" -backend-config="key=${{env.project}}/terraform.tfstate" -backend-config="bucket=${{env.bucket_name}}" -backend-config="dynamodb_table=${{env.bucket_name}}-lock"

  #     - name: Terraform Plan
  #       run: 
  #         terraform plan -no-color -var-file="vars_${{env.name}}.tfvars" -out=plan.tfplan

  #     - name: Archive plan
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: "terraform-plan-${{env.project}}-${{env.name}}"
  #         path: ./plan.tfplan

#--------------------------------------------------------------------------------------------------------------
# Terraform deploy jobs
#--------------------------------------------------------------------------------------------------------------

  deploy_stg:
    name: "Staging Deployment"
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.7
    needs: "plan"
    if: github.ref == 'refs/heads/master'
    environment:
      name: apply-staging
    env: 
      name: "staging"
      bucket_name: "teststaging-terraform-state"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID_STG}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY_STG}}
          aws-region: eu-central-1

      - name: Terraform Init
        run: terraform init -backend-config="region=eu-central-1" -backend-config="key=${{env.project}}/terraform.tfstate" -backend-config="bucket=${{env.bucket_name}}" -backend-config="dynamodb_table=${{env.bucket_name}}-lock"

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: "terraform-plan-${{env.project}}-${{env.name}}"

      - name: Terraform Apply
        run: terraform apply -input=false -no-color plan.tfplan
 
  deploy_prod:
    name: "Production Deployment"
    runs-on: ubuntu-latest
    container:
      image: hashicorp/terraform:1.7
    needs: "plan"
    if: github.ref == 'refs/heads/production'
    environment:
      name: apply-production
    env: 
      name: "production"
      bucket_name: "test-terraform-state"
  
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID_PROD}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY_PROD}}
          aws-region: eu-central-1

      - name: Terraform Init
        run: terraform init -backend-config="region=eu-central-1" -backend-config="key=${{env.project}}/terraform.tfstate" -backend-config="bucket=${{env.bucket_name}}" -backend-config="dynamodb_table=${{env.bucket_name}}-lock"
      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: "terraform-plan-${{env.project}}-${{env.name}}"

      - name: Terraform Apply
        run: terraform apply -input=false -no-color plan.tfplan
