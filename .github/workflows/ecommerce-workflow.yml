name: Deploy terraform

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - production

jobs:

#---------------------------------------------------------------------------------------------------------------
# Terraform plan jobs
#---------------------------------------------------------------------------------------------------------------
  plan:
    name: "Staging and Production plan"
    runs-on: ubuntu-latest
    container:
      image: devopsinfra/docker-terragrunt:aws-tf-1.2.9-tg-0.38.12
    strategy:
      matrix:
        isProduction: 
          - "github.ref == 'refs/heads/production'"
        isMaster: 
          - "github.ref == 'refs/heads/master'"
        include:
          - environment: "plan-staging"
            aws-access-key-id: "AWS_ACCESS_KEY_ID_STG"
            aws-secret-access-key: "AWS_SECRET_KEY_STG"
            name: "staging"
            bucket_name: "grocekeystaging-terraform-state"
            project: "test"
          - environment: "plan-production"
            aws-access-key-id: "AWS_ACCESS_KEY_ID_PROD"
            aws-secret-access-key: "AWS_SECRET_KEY_PROD"
            name: "production"
            bucket_name: "grocekey-terraform-state"
            project: "test"
        exclude:
          - isProduction: "github.ref == 'refs/heads/production'"
            isMaster: "github.ref == 'refs/heads/master'" 

    environment:
      name: ${{matrix.environment}}
    env: 
      AWS_ACCESS_KEY_ID: ${{vars[matrix.aws-access-key-id]}}
      AWS_SECRET_KEY: ${{secrets[matrix.aws-secret-access-key]}}

    steps:

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        
      - name: Checkout repo
        uses: actions/checkout@v4
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_KEY}}
          aws-region: eu-central-1
                  
      - name: Terraform Init
        run: terraform init -backend-config="key=${{matrix.project}}/terraform.tfstate" -backend-config="bucket=${{matrix.bucket_name}}"

      - name: Terraform Plan
        run: terraform plan -no-color -var-file="vars_${{matrix.name}}.tfvars" -out=plan.tfplan

      - name: Archive plan
        uses: actions/upload-artifact@v4
        with:
          name: "terraform-plan-${{matrix.project}}-${{matrix.name}}"
          path: ./plan.tfplan

  # plan_stg:
  #   name: "Staging Plan"
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/master'
  #   environment:
  #     name: plan-staging

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID_STG}}
  #         aws-secret-access-key: ${{secrets.AWS_SECRET_KEY_STG}}
  #         aws-region: eu-central-1

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.1.7"

  #     - name: Terraform Init
  #       run: terraform init

  #     - name: Terraform Plan
  #       id: plan
  #       working-directory: .
  #       run: |
  #         echo 'plan<<EOF' >> $GITHUB_OUTPUT
  #         terraform plan -no-color -var-file="vars_stg.tfvars" -out=plan >> $GITHUB_OUTPUT
  #         echo 'EOF' >> $GITHUB_OUTPUT

  #     - name: Archive plan
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: "stg-plan"
  #         path: ./plan

  # plan_prod:
  #   name: "Production Plan"
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/production'
  #   environment:
  #     name: plan-production

  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID_PROD}}
  #         aws-secret-access-key: ${{secrets.AWS_SECRET_KEY_PROD}}
  #         aws-region: eu-central-1

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: "1.1.7"

  #     - name: Terraform Init
  #       run: terraform init

  #     - name: Terraform Plan
  #       id: plan
  #       working-directory: .
  #       run: |
  #         echo 'plan<<EOF' >> $GITHUB_OUTPUT
  #         terraform plan -no-color -var-file="vars_prod.tfvars" -out=plan >> $GITHUB_OUTPUT
  #         echo 'EOF' >> $GITHUB_OUTPUT

  #     - name: Archive plan
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: "prod-plan"
  #         path: ./plan

#--------------------------------------------------------------------------------------------------------------
# Terraform deploy jobs
#--------------------------------------------------------------------------------------------------------------

  deploy_stg:
    name: "Staging Deployment"
    runs-on: ubuntu-latest
    needs: plan
    container:
      image: devopsinfra/docker-terragrunt:aws-tf-1.2.9-tg-0.38.12
    if: github.ref == 'refs/heads/master'
    environment:
      name: apply-staging
    env: 
      name: "staging"
      bucket_name: "grocekeystaging-terraform-state"

    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID_STG}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY_STG}}
          aws-region: eu-central-1

      - name: Terraform Init
        run: terraform init -backend-config="key=${{env.project}}/terraform.tfstate" -backend-config="bucket=${{env.bucket_name}}"

      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: "terraform-plan-${{env.project}}-${{env.name}}"

      - name: Terraform Apply
        run: terraform apply -input=false -no-color plan.tfplan 
 
  deploy_prod:
    name: "Production Deployment"
    runs-on: ubuntu-latest
    needs: plan
    container:
      image: devopsinfra/docker-terragrunt:aws-tf-1.2.9-tg-0.38.12
    if: github.ref == 'refs/heads/production'
    environment:
      name: apply-production
    env: 
      name: "production"
      bucket_name: "grocekey-terraform-state"
  
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{vars.AWS_ACCESS_KEY_ID_PROD}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY_PROD}}
          aws-region: eu-central-1

      - name: Terraform Init
        run: terraform init -backend-config="key=${{env.project}}/terraform.tfstate" -backend-config="bucket=${{env.bucket_name}}"
      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: "terraform-plan-${{env.project}}-${{env.name}}"

      - name: Terraform Apply
        run: terraform apply -input=false -no-color plan.tfplan